/* Code generated by cmd/cgo; DO NOT EDIT. */

/* package command-line-arguments */


#line 1 "cgo-builtin-export-prolog"

#include <stddef.h>

#ifndef GO_CGO_EXPORT_PROLOGUE_H
#define GO_CGO_EXPORT_PROLOGUE_H

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef struct { const char *p; ptrdiff_t n; } _GoString_;
#endif

#endif

/* Start of preamble from import "C" comments.  */


#line 3 "main.go"

	#include <stdlib.h>
	#include <string.h>
	#include <gmp.h>

	#include "cgo/verifier.h"

#line 1 "cgo-generated-wrapper"


/* End of preamble from import "C" comments.  */


/* Start of boilerplate cgo prologue.  */
#line 1 "cgo-gcc-export-header-prolog"

#ifndef GO_CGO_PROLOGUE_H
#define GO_CGO_PROLOGUE_H

typedef signed char GoInt8;
typedef unsigned char GoUint8;
typedef short GoInt16;
typedef unsigned short GoUint16;
typedef int GoInt32;
typedef unsigned int GoUint32;
typedef long long GoInt64;
typedef unsigned long long GoUint64;
typedef GoInt64 GoInt;
typedef GoUint64 GoUint;
typedef size_t GoUintptr;
typedef float GoFloat32;
typedef double GoFloat64;
#ifdef _MSC_VER
#include <complex.h>
typedef _Fcomplex GoComplex64;
typedef _Dcomplex GoComplex128;
#else
typedef float _Complex GoComplex64;
typedef double _Complex GoComplex128;
#endif

/*
  static assertion to make sure the file is being used on architecture
  at least with matching size of GoInt.
*/
typedef char _check_for_64_bit_pointer_matching_GoInt[sizeof(void*)==64/8 ? 1:-1];

#ifndef GO_CGO_GOSTRING_TYPEDEF
typedef _GoString_ GoString;
#endif
typedef void *GoMap;
typedef void *GoChan;
typedef struct { void *t; void *v; } GoInterface;
typedef struct { void *data; GoInt len; GoInt cap; } GoSlice;

#endif

/* End of boilerplate cgo prologue.  */

#ifdef __cplusplus
extern "C" {
#endif


/* Return type for GenerateCommitChallenge */
struct GenerateCommitChallenge_return {
	int64_t** r0;
	int* r1;
	int r2;
};

// The parameters: dataPtr **C.int64_t, rows *C.int, cols *C.int
// are for returning [][]int64 array as cgo does not support returning
// types [][]int64
//
extern struct GenerateCommitChallenge_return GenerateCommitChallenge(CommitC* commitsC, long int length, CommonParam* commonParams, unsigned char* IDPtr, int IDLength);
extern void GetByteArray(unsigned char* b, int length);
extern void GetByteArrayAsStruct(MyByte* b);
extern void GetByteArrayAsStructArray(MyByte* myByte, long int length);
extern void GetByteArrayOfArray(unsigned char** array, int length, int* lengths);

/* Return type for ReturnAnArray */
struct ReturnAnArray_return {
	int* r0;
	int* r1;
};
extern struct ReturnAnArray_return ReturnAnArray();
extern void FreeArray(int* arr);

/* Return type for ReturnArrayofArrays */
struct ReturnArrayofArrays_return {
	int** r0;
	int* r1;
	int r2;
};
extern struct ReturnArrayofArrays_return ReturnArrayofArrays();

#ifdef __cplusplus
}
#endif
